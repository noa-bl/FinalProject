pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-runner'
            yamlFile 'Infrastructure/jenkins/runner.yaml'
            defaultContainer 'builder'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'github-token'
        REPO_URL = 'https://github.com/noa-bl/FinalProject.git'
        GITHUB_REPO = 'noa-bl/FinalProject'
        DOCKER_IMAGE = 'noabl/flask-app'
        TEST_IMAGE = 'noabl/flask-test'
        APPLICATION_DIR = 'Application'
        FEATURE_BRANCH = 'feature'
        VERSION = 'latest'
        GITHUB_API_URL = 'https://api.github.com'
        EMAIL_RECIPIENTS = 'noablfdev@gmail.com'
        EMAIL_CREDENTIALS = credentials('email-cred')

    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/feature'], [name: '*/master']], //change later
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: GITHUB_CREDENTIALS
                    ]]
                ])
            }
        }
        // TRIGGERING FAIL! line 60 docker.build
        stage('Build and Push Image for app- with temp tag') {
            steps {
                    script {
                        docker.buicdld("${DOCKER_IMAGE}:temp", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${DOCKER_IMAGE}:temp").push()
                        }
                    }
            }
        }
                stage('Build and Push Image for test_main') {
            steps {
                    script {
                        docker.build("${TEST_IMAGE}:latest", "-f ${APPLICATION_DIR}/dockerfile.test ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${TEST_IMAGE}:latest").push()
                        }
                    }
            }
        }
        stage('Run Tests with Docker Compose') {
            steps {
                    script {
                        sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --abort-on-container-exit"
                    }
                }
            
            
        }

        //added stage: merge request when on feature branch
stage('Create Merge Request') {
    when {
        not {
            branch 'master'
        }
    }
    steps {
        withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            script {
                def branchName = env.BRANCH_NAME
                def pullRequestTitle = "Merge ${branchName} into master"
                def pullRequestBody = "Merge request from Jenkins pipeline - branch ${branchName}"

                // Debugging statements
                echo "Branch Name: ${branchName}"
                echo "Pull Request Title: ${pullRequestTitle}"
                echo "Pull Request Body: ${pullRequestBody}"
                echo "GitHub API URL: ${GITHUB_API_URL}"
                echo "GitHub Repo: ${GITHUB_REPO}"
                echo "GitHub Username: ${USERNAME}"

                sh """
                    set -x
                    curl -X POST -u ${USERNAME}:${PASSWORD} \
                    -H "Accept: application/vnd.github.v3+json" \
                    -d '{ "title": "${pullRequestTitle}", "body": "${pullRequestBody}", "head": "${branchName}", "base": "master" }' \
                    ${GITHUB_API_URL}/repos/${GITHUB_REPO}/pulls
                    set +x
                """
            }
        }
    }
}
        //ask for merge approval 
            stage('Wait for Approval for Merge') {
                when {
                allOf{
                    not {branch 'master'}
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    }
                
            }
            steps {
                script {
                    def userInput = input(
                        id: 'Proceed1', message: 'Approve Merge?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Approve to merge the feature branch into master?', name: 'approve']
                        ]
                    )
                    if (userInput == false) {
                        error "Merge not approved."
                    }
                }
            }
        }

        stage('Push Final Image to DockerHub') { //only when branch is master
            when {
                allOf{
                    branch 'master'
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
            }
            steps {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        sh "docker tag ${DOCKER_IMAGE}:temp ${DOCKER_IMAGE}:${VERSION}"
                        sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                        }
                    }
                }
            }
            //add chart stages...
    }

     post {
        failure {  // This block runs if the pipeline fails
            script {
                // Log the email content to console for debugging purposes
                echo "Sending failure email..."

                // Send the email with hardcoded subject and body
                try {
                    emailext(
                        to: "noablfdev@gmail.com",
                        subject: "Build Failed - Automatic Email",
                        body: "The build has failed. Please check the Jenkins logs for more details.",
                        mimeType: 'text/plain',
                        attachLog: true  // Attach the build log to the email
                    )
                } catch (Exception e) {
                    echo "Failed to send email: ${e.message}"
                }
            }
        }
    }
}