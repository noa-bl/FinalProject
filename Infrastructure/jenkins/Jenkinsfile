pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-runner'
            yamlFile 'Infrastructure/jenkins/runner.yaml'
            defaultContainer 'builder'
        }
    }
    environment {
        DOCKER_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'github-token'
        REPO_URL = 'https://github.com/noa-bl/FinalProject.git'
        GITHUB_REPO = 'noa-bl/FinalProject'
        DOCKER_IMAGE = 'noabl/flask-app'
        TEST_IMAGE = 'noabl/flask-test'
        APPLICATION_DIR = 'Application'
        FEATURE_BRANCH = 'feature'
        VERSION = 'latest'
        GITHUB_API_URL = 'https://api.github.com'
        EMAIL_RECIPIENTS = 'noablfdev@gmail.com'
        EMAIL_CREDENTIALS = credentials('email-cred')
        HELM_REPO = 'noabl/helm-charts'
        HELM_EXPERIMENTAL_OCI = '1' // Enable OCI support for Helm
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/feature'], [name: '*/master']], //change later
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: GITHUB_CREDENTIALS
                    ]]
                ])
            }
        }
        stage('Install Helm') {
            steps {
                script {
                    // Check if Helm is installed
                    def helmInstalled = sh(script: 'which helm', returnStatus: true) == 0

                    // Install Helm if not installed
                    if (!helmInstalled) {
                        sh '''
                        wget https://get.helm.sh/helm-v3.6.1-linux-amd64.tar.gz
                        ls -a
                        tar -xzvf helm-v3.6.1-linux-amd64.tar.gz
                        sudo cp linux-amd64/helm /usr/bin/
                        helm version
                        '''
                    } else {
                        echo 'Helm is already installed'
                        sh 'helm version'
                    }
                }
            }
        }
        stage('Build and Push Image for app- with temp tag') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:temp", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:temp").push()
                    }
                }
            }
        }
        stage('Build and Push Image for test_main') {
            steps {
                script {
                    docker.build("${TEST_IMAGE}:latest", "-f ${APPLICATION_DIR}/dockerfile.test ${APPLICATION_DIR}")
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image("${TEST_IMAGE}:latest").push()
                    }
                }
            }
        }
        stage('Run Tests with Docker Compose') {
            steps {
                script {
                    sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --abort-on-container-exit"
                }
            }
        }
        stage('Build Helm Package when in master') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "helm package Infrastructure/app -d ${WORKSPACE}/helm-packages"
                }
            }
        }
        stage('Create Merge Request') {
            when {
                not {
                    branch 'master'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                        def branchName = env.BRANCH_NAME
                        def pullRequestTitle = "Merge ${branchName} into master"
                        def pullRequestBody = "Merge request from Jenkins pipeline - branch ${branchName}"

                        // Debugging statements
                        echo "Branch Name: ${branchName}"
                        echo "Pull Request Title: ${pullRequestTitle}"
                        echo "Pull Request Body: ${pullRequestBody}"
                        echo "GitHub API URL: ${GITHUB_API_URL}"
                        echo "GitHub Repo: ${GITHUB_REPO}"
                        echo "GitHub Username: ${USERNAME}"

                        sh """
                        set -x
                        curl -X POST -u ${USERNAME}:${PASSWORD} \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "title": "${pullRequestTitle}", "body": "${pullRequestBody}", "head": "${branchName}", "base": "master" }' \
                        ${GITHUB_API_URL}/repos/${GITHUB_REPO}/pulls
                        set +x
                        """
                    }
                }
            }
        }
        stage('Push Final Image to DockerHub') { //only when branch is master!
            when {
                allOf {
                    branch 'master'
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
            }
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        sh "docker tag ${DOCKER_IMAGE}:temp ${DOCKER_IMAGE}:${VERSION}"
                        sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                    }
                }
            }
        }
        stage('Push Helm Package to DockerHub') {
    when {
        branch 'master'
    }
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                sh """
                export HELM_EXPERIMENTAL_OCI=1
                echo $DOCKER_PASSWORD | helm registry login registry-1.docker.io -u $DOCKER_USERNAME --password-stdin
                helm package ${WORKSPACE}/helm-charts/myapp --version 0.1.0
                helm push ${WORKSPACE}/myapp-0.1.0.tgz oci://registry-1.docker.io/$DOCKER_USERNAME/helm-charts
                """
            }
        }
    }
}
    }
    post {
        failure {
            script {
                emailext subject: "Build Failure - automated notification",
                    body: "An error occurred, please check the latest console output",
                    replyTo: 'noablfdev@gmail.com',
                    mimeType: 'text/plain',
                    to: 'noablfdev@gmail.com'
            }
        }
    }
}
