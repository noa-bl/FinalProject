pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-runner'
            yamlFile 'Infrastructure/jenkins/runner.yaml'
            defaultContainer 'builder'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'github-token'
        REPO_URL = 'https://github.com/noa-bl/FinalProject.git'
        DOCKER_IMAGE = 'noabl/flask-app'
        TEST_IMAGE = 'noabl/flask-test'
        APPLICATION_DIR = 'Application'
        FEATURE_BRANCH = 'feature'
        VERSION = 'latest'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/feature']],
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: GITHUB_CREDENTIALS
                    ]]
                ])
            }
        }
        stage('Build and Push Image for app- with temp tag') {
            steps {
                container('builder') {
                    script {
                        docker.build("${DOCKER_IMAGE}:temp", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${DOCKER_IMAGE}:temp").push()
                        }
                    }
                }
            }
        }
                stage('Build and Push Image for test_main') {
            steps {
                container('builder') {
                    script {
                        docker.build("${TEST_IMAGE}:latest", "-f ${APPLICATION_DIR}/dockerfile.test ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${TEST_IMAGE}:latest").push()
                        }
                    }
                }
            }
        }
        stage('Run Tests with Docker Compose') {
            steps {
                container('docker-compose') {
                    script {
                        // Use docker-compose to run the tests, using the pushed temp images
                        sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --build --abort-on-container-exit test_main"
                    }
                }
            }
        }
        stage('Push Final Image to DockerHub') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                container('builder') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${DOCKER_IMAGE}:temp").tag("${DOCKER_IMAGE}:${VERSION}")
                            docker.image("${DOCKER_IMAGE}:${VERSION}").push()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                currentBuild.result = 'SUCCESS'
            }
        }
        cleanup {
            container('builder') {
                script {
                    docker.image("${DOCKER_IMAGE}:temp").remove()
                }
            }
        }
    }
}
