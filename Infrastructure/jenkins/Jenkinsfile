pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-runner'
            yamlFile 'Infrastructure/jenkins/runner.yaml'
            defaultContainer 'builder'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'github-token'
        REPO_URL = 'https://github.com/noa-bl/FinalProject.git'
        DOCKER_IMAGE = 'noabl/flask-app'
        TEST_IMAGE = 'noabl/flask-test'
        APPLICATION_DIR = 'Application'
        FEATURE_BRANCH = 'feature'
        VERSION = 'latest'
        GITHUB_API_URL = 'https://api.github.com'
    }
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/feature']],
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: GITHUB_CREDENTIALS
                    ]]
                ])
            }
        }
        stage('Create External Network') {
            steps {
                    script {
                        sh 'docker network create mynetwork || true'
                    }
                }
            
        }
        stage('Build and Push Image for app- with temp tag') {
            steps {
                    script {
                        docker.build("${DOCKER_IMAGE}:temp", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${DOCKER_IMAGE}:temp").push()
                        }
                    }
            }
        }
                stage('Build and Push Image for test_main') {
            steps {
                    script {
                        docker.build("${TEST_IMAGE}:latest", "-f ${APPLICATION_DIR}/dockerfile.test ${APPLICATION_DIR}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                            docker.image("${TEST_IMAGE}:latest").push()
                        }
                    }
            }
        }
        stage('Run Tests with Docker Compose') {
            steps {
                    script {
                        sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --abort-on-container-exit"
                    }
                }
            
        }
        //added stage: merge request when on feature branch

         stage('Create Merge Request') {
            when {
                not {
                    branch 'main'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def branchName = env.BRANCH_NAME
                        def pullRequestTitle = "Merge ${branchName} into master"
                        def pullRequestBody = "Merge request from Jenkins pipeline - branch ${branchName}"

                        sh """
                            curl -X POST -u ${GITHUB_TOKEN}:x-oauth-basic \
                            -H "Accept: application/vnd.github.v3+json" \
                            -d '{ "title": "${pullRequestTitle}", "body": "${pullRequestBody}", "head": "${branchName}", "base": "master" }' \
                            ${GITHUB_API_URL}/repos/${ REPO_URL}/pulls
                        """
                    }
                }
            }
        }
    }
        stage('Push Final Image to DockerHub') { //only when branch is master
            when {
                allOf{
                    branch 'master'
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
            }
            steps {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        sh "docker tag ${DOCKER_IMAGE}:temp ${DOCKER_IMAGE}:${VERSION}"
                        sh "docker push ${DOCKER_IMAGE}:${VERSION}"
                        }
                    }
                }
            }
            //add chart stages...
    }
}
